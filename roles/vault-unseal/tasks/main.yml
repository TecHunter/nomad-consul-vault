- name: Ensure Vault is in a running state
  service:
    name: vault
    state: started
  register: vaultServiceDetails
  until: vaultServiceDetails.status.ActiveState == "active"
  retries: 15
  delay: 20

- name: Get vault status
  shell: vault status -format=json
  failed_when: false
  register: vault_status
  environment:
    VAULT_ADDR: "http://127.0.0.1:{{ vault.ports.http}}"

- name: Unseal vault with unseal keys
  shell: |
    vault operator unseal {{ vars['vault_unseal_key_' + (item | string)] }}
  environment:
    VAULT_ADDR: "http://127.0.0.1:{{ vault.ports.http}}"
  loop: "{{ range(0, 3 + 1) | list }}"
  when: vault_status.stdout | from_json | json_query('sealed')

- name: add service to auto unseal at boot
  copy:
    src: "auto-unseal.sh"
    dest: "/root/"
    mode: 'u+x'

- name: Install unseal service file
  template:
    src: "./templates/auto-unseal.service.j2"
    dest: "/etc/systemd/system/auto-unseal.service"
    owner: "root"
    group: "root"
    mode: '0644'

- name: Ensure Vault is in a running state
  service:
    name: auto-unseal
    state: started
    enabled: true
    daemon_reload: true